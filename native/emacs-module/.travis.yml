
language: c

sudo: required
dist: trusty

cache:
  directories:
    - "$HOME/.cabal/packages"
    - "$HOME/.cabal/store"
    - "$HOME/.cabal/bin"
    - "$HOME/emacs"

before_cache:
  - rm -fv $HOME/.cabal/packages/hackage.haskell.org/build-reports.log
  # remove files that are regenerated by 'cabal update'
  - rm -fv $HOME/.cabal/packages/hackage.haskell.org/00-index.*
  - rm -fv $HOME/.cabal/packages/hackage.haskell.org/01-index*
  - rm -fv $HOME/.cabal/packages/hackage.haskell.org/*.json
  - rm -fv $HOME/.cabal/packages/hackage.haskell.org/hackage-security-lock
  - rm -rfv $HOME/.cabal/packages/head.hackage

# Speed up git.
git:
  depth: 5

matrix:
  allow_failures:
     - compiler: "GHC HEAD, Cabal HEAD"

  include:
    - env: GHC=8.0.2 CABALVER=2.0 ALLOW_NEWER=0
      compiler: "GHC 8.0.2, Cabal 2.0"
    - env: GHC=8.2.2 CABALVER=2.0 ALLOW_NEWER=0
      compiler: "GHC 8.2.2, Cabal 2.0"
    - env: GHC=8.4.3 CABALVER=2.2 ALLOW_NEWER=0
      compiler: "GHC 8.4.3, Cabal 2.2"
    - env: GHC=head CABALVER=head ALLOW_NEWER=1
      compiler: "GHC HEAD, Cabal HEAD"

install: true

before_install:

  - sudo add-apt-repository ppa:hvr/ghc -y
  - sudo apt-get update -q
  - sudo apt-get build-dep emacs -y
  - sudo apt-get install ghc-$GHC cabal-install-$CABALVER autoconf automake autotools-dev build-essential gcc libtool quilt sharutils -y

  - export PATH="/opt/ghc/$GHCVER/bin:/opt/cabal/$CABALVER/bin:$HOME/.cabal/bin:$PATH"

  - export EMACS_INSTALL="$HOME/emacs"

  # Needed to make emacs dump properly.
  - sudo bash -c 'echo 0 > /proc/sys/kernel/randomize_va_space'

  - |
    if [ "$ALLOW_NEWER" = 1 ]; then
      ALLOW_NEWER_FLAG="--allow-newer=base"
    else
      ALLOW_NEWER_FLAG=""
    fi

install:
  - echo "$PATH"
  - echo "$(ghc --version) [$(ghc --print-project-git-commit-id 2> /dev/null || echo '?')]"
  - echo "$(ghc-pkg list)"

  - ghc-pkg list
  - cabal --version

  - travis_retry cabal update -v

  - echo "Installing Emacs"
  - gcc --version
  - export CC=gcc
  - REPO_ROOT="$(pwd)"
  - |
    EMACSDIR=$(mktemp -d /tmp/emacs-build.XXXX);
    if ! [[ -f "$EMACS_INSTALL/bin/emacs" ]] || ! "$EMACS_INSTALL/bin/emacs" --version ; then
      ( cd "$EMACSDIR" ;
        travis_retry wget https://ftp.gnu.org/gnu/emacs/emacs-26.1.tar.xz ;
        tar xf emacs-26.1.tar.xz ;
        cd emacs-26.1 ;
        patch -p1 <"$REPO_ROOT/test/0001-Fix-tracking-of-freed-global-values-when-module-asse.patch"
        ./autogen.sh ;
        ./configure --without-makeinfo --without-gif --without-rsvg --without-lcms2 --without-libsystemd --without-cairo --without-xml2 --without-imagemagick --without-xfc --without-libotf --without-m17n-flt --without-tiff --without-jpeg --without-xpm --without-sound --without-pop --without-mailutils --without-hesiod --without-kerberos --without-kerberos5 --without-zlib --with-modules --prefix="$EMACS_INSTALL" >/dev/null || cat config.log;
        echo "Bulding Emacs" ;
        make bootstrap -j2 >/dev/null ;
        echo "Installing Emacs" ;
        make install -j2 >/dev/null ;
      )
    fi

  - |
    "$EMACS_INSTALL/bin/emacs" --version

  - echo "Installing dependencies"
  - cabal new-build --only-dependencies -j2 $ALLOW_NEWER_FLAG

  - DISTDIR=$(mktemp -d /tmp/dist-emacs-module.XXXX)
  - TESTDIR=$(mktemp -d /tmp/dist-test.XXXX)

# Here starts the actual work to be performed for the package under test;
# any command which exits with a non-zero exit code causes the build to fail.
script:
  # test that source-distributions can be generated
  - cabal sdist
  - cp -r test "$TESTDIR"
  - cat ./dist/emacs-module-*.tar.gz | (cd "${DISTDIR}/" && tar -xzvf -)
  - cd ${DISTDIR}/emacs-module-*
  - PKGDIR="$(pwd)"

  # Build the package
  - cabal new-configure $ALLOW_NEWER_FLAG
  - cabal new-build
  - cabal check

  # Now run some tests
  - cd "${TESTDIR}/test/"

  - |
      echo -e "packages: ${PKGDIR}/emacs-module.cabal emacs-module-test.cabal\nconstraints: emacs-module +assertions +module-assertions\npackage emacs-module\n  ghc-options: -Werror\npackage emacs-module-test\n  ghc-options: -Werror\nlibrary-profiling: False" >cabal.project

  - cabal new-configure $ALLOW_NEWER_FLAG
  - cabal new-build
  - |
    DYNAMIC_MODULE=$(find . -name 'libemacs-module-test.so')
    DYNAMIC_MODULE_DIR=$(dirname "$DYNAMIC_MODULE")
    DYNAMIC_MODULE_FILE=$(basename "$DYNAMIC_MODULE")
    echo "Emacs module is built at $DYNAMIC_MODULE"

  - |
    "$EMACS_INSTALL/bin/emacs" -Q --batch --module-assertions -L "$DYNAMIC_MODULE_DIR" -L "elisp" -l "$DYNAMIC_MODULE_FILE" -l haskell-emacs-module-test -f ert-run-tests-batch-and-exit
