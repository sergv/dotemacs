==================
Annotations
==================

@Test
class Empty

---

(source_file
  (class_declaration
        (modifiers (annotation (user_type (type_identifier))))
        (type_identifier)))

==================
Annotations with use-site-target
==================

class Empty(@field:Test val x: Boolean)

---

(source_file
  (class_declaration
        (type_identifier)
        (primary_constructor (class_parameter
            (modifiers (annotation (use_site_target) (user_type (type_identifier))))
            (binding_pattern_kind)
            (simple_identifier)
            (user_type (type_identifier))))))

==================
Multi-annotations
==================

@set:[Inject VisibleForTesting]
var x: Int

---

(source_file
    (property_declaration
        (modifiers (annotation (use_site_target) (user_type (type_identifier)) (user_type (type_identifier))))
        (binding_pattern_kind)
        (variable_declaration (simple_identifier) (user_type (type_identifier)))))

==================
Multiple annotations on a variable
==================

class X {
 @A @B
 override val s: String
}

---

(source_file
  (class_declaration
    (type_identifier)
    (class_body
      (property_declaration
        (modifiers
          (annotation (user_type (type_identifier)))
          (annotation (user_type (type_identifier)))
          (member_modifier))
        (binding_pattern_kind)
        (variable_declaration (simple_identifier) (user_type (type_identifier)))
      )
    )
  )
)


==================
Multiple annotations on a function
==================

class X {
 @A @B
 fun s(): String
}

---

(source_file
  (class_declaration
    (type_identifier)
    (class_body
      (function_declaration
        (modifiers
          (annotation (user_type (type_identifier)))
          (annotation (user_type (type_identifier))))
        (simple_identifier)
        (function_value_parameters)
        (user_type (type_identifier))
      )
    )
  )
)

=====================
Annotated functions
======================

@Test
fun foo() = bar {}

---

(source_file
  (function_declaration
    (modifiers
      (annotation
        (user_type
          (type_identifier))))
    (simple_identifier)
    (function_value_parameters)
    (function_body
      (call_expression
        (simple_identifier)
        (call_suffix
          (annotated_lambda
            (lambda_literal)))))))


==================
Comma in annotation property
==================

class EnvironmentSpec {
    @Option(
      names = ["--environment", "--env"],
      arity = "0..1",
      description = [
          "Which environment to use",
      ],
    )
    var environment: Environment
}

---

(source_file
  (class_declaration
    (type_identifier)
    (class_body
      (property_declaration
        (modifiers
          (annotation
            (constructor_invocation
              (user_type
                (type_identifier))
              (value_arguments
                (value_argument
                  (simple_identifier)
                  (collection_literal
                    (string_literal (string_content))
                    (string_literal (string_content))))
                (value_argument
                  (simple_identifier)
                  (string_literal (string_content)))
                (value_argument
                  (simple_identifier)
                  (collection_literal
                    (string_literal (string_content))
                  ))))))
        (binding_pattern_kind)
        (variable_declaration
          (simple_identifier)
          (user_type
            (type_identifier)))
      ))))
